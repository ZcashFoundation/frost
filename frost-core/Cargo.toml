[package]
name = "frost-core"
edition.workspace = true
version.workspace = true
authors.workspace = true
readme = "README.md"
license.workspace = true
repository.workspace = true
categories.workspace = true
keywords = ["cryptography", "crypto", "threshold", "signature", "schnorr"]
description = "Types and traits to support implementing Flexible Round-Optimized Schnorr Threshold signature schemes (FROST)."

[package.metadata.docs.rs]
features = ["serde"]
rustdoc-args = ["--cfg", "docsrs"]

[dependencies]
byteorder = { workspace = true }
const-crc32 = { version = "1.2.0", package = "const-crc32-nostd" }
document-features.workspace = true
debugless-unwrap = { workspace = true }
derive-getters = { workspace = true }
hex.workspace = true
postcard = { workspace = true, features = ["alloc"], optional = true }
rand_core = { workspace = true }
serde = { workspace = true, features = ["derive"], optional = true }
serdect = { workspace = true, optional = true }
thiserror-nostd-notrait = { workspace = true }
thiserror = { workspace = true, optional = true }
visibility = { workspace = true }
zeroize = { workspace = true, features = ["derive"] }
itertools = { workspace = true }

# Test dependencies used with the test-impl feature
proptest = { workspace = true, optional = true }
serde_json = { workspace = true, optional = true }
criterion = { workspace = true, optional = true }

[dev-dependencies]
criterion.workspace = true
lazy_static.workspace = true
proptest.workspace = true
rand.workspace = true
rand_chacha.workspace = true
serde_json.workspace = true

[features]
default = ["serialization", "cheater-detection", "std"]
#! ## Features
## Enable standard library support.
std = ["dep:thiserror"]
## Expose internal types, which do not have SemVer guarantees. This is an advanced
## feature which can be useful if you need to build a modified version of FROST.
## The docs won't list them, you will need to check the source code.
internals = []
## Enable `serde` support for types that need to be communicated. You
## can use `serde` to serialize structs with any encoder that supports
## `serde` (e.g. JSON with `serde_json`).
serde = ["dep:serde", "dep:serdect"]
serialization = ["serde", "dep:postcard"]
# Exposes ciphersuite-generic tests for other crates to use
test-impl = ["dep:proptest", "dep:serde_json", "dep:criterion"]
# Enable cheater detection
cheater-detection = []

[lib]
bench = false
